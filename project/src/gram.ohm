Inside {
	Exp    = Seq+                      -- seq
	Seq    = Or  ";"                   -- seq

	List   = LElm+ LExp                -- two
	       | LElm+                     -- end
	       | LExp                      -- one
	       |                           -- nul
	LElm   = LExp ","                  -- elm
	LExp   = Or                        -- exp

	Hash   = HElm+ HExp                -- two
	       | HElm+                     -- end
	       | HExp                      -- one
	       |                           -- nul
	HElm   = HExp ","                  -- elm
	HExp   = ident ":" Or              -- exp

	Or     = Or  "||" And              -- or
	       | And

	And    = And "&&" Eq               -- and
	       | Eq

	Eq     = Eq  "==" Cmp              -- eq
	       | Eq  "!=" Cmp              -- ne
	       | Cmp

	Cmp    = Cmp ">"  Add              -- gt
	       | Cmp "<"  Add              -- lt
	       | Cmp ">=" Add              -- ge
	       | Cmp "<=" Add              -- le
	       | Add

	Add    = Add "+"  Mul              -- add
	       | Add "-"  Mul              -- sub
	       | Mul

	Mul    = Mul "*"  Pow              -- mul
	       | Mul "/"  Pow              -- div
	       | Mul "%"  Pow              -- mod
	       | Pow

	Pow    = Pow "^"  Un               -- pow
	       | Un

	Un     = "+" Un                    -- pos
	       | "-" Un                    -- neg
	       | "!" Un                    -- not
	       | Index

	Index  = Pri Sub+                  -- idx
	       | Call
	Sub    = "." ident                 -- ident
	       | "." index                 -- index
	       | ".(" Or ")"               -- expr

	Call   = Type  Type+               -- args
	       | Type

	Type   = label Def+                -- args
	       | Def

	Def    = "fun" ident* "->" Or      -- fun
	       | "set" ident  "="  Or      -- set
	       | "set" Index  "="  Or      -- upd
	       | "as"  ident*       ":" Or -- as
	       | "def" ident ident* ":" Or -- def
	       | "match" Or  "with" Case+  -- match
	       | Pri                       -- pri

	Case   = "|" Or "->" Or            -- case

	Pri    = "(" Or   ")"              -- paren
	       | "{" Exp  "}"              -- brace
	       | "[" List "]"              -- list
	       | "[" Hash "]"              -- hash
	       | Pri "(" ")"               -- call
	       | label                     -- type
	       | ident                     -- var
	       | number                    -- num
	       | string                    -- str

	ident  = ~kword /[a-z_]/ alnum*

	label  = /[A-Z]/  alnum*

	index  = digit+                   -- whole

	number = digit+ "." digit+        -- fract
	       | digit+                   -- whole

	string = "\"" char* "\""

	char   = escape
	       | ~"\"" ~"\n" _

	escape = "\\x" hexDigit hexDigit                    -- hexEscape
	       | "\\u" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape
	       | "\\" _                                     -- escape

	kword  = "match"
	       | "with"
	       | "fun"
	       | "as"
	       | "set"
	       | "def"
}
